//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Game/Player/Controls/PlayerActorControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Player.Controls
{
    public partial class @PlayerActorControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerActorControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActorControls"",
    ""maps"": [
        {
            ""name"": ""PlayerActor"",
            ""id"": ""9de6de9b-d70f-4b91-9975-a152284551f3"",
            ""actions"": [
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""7e5c4501-254f-4541-bca8-0c53801e83b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""92222500-9f9f-4f86-a32b-e021cf86ac82"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""bb3486ff-7577-421c-bf9f-637d780d0f4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""aa2de459-d620-4946-aaa1-35821489b168"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryTouchContact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""43c5a9e9-e106-40ba-b6ff-8d9e26cd4ae0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryTouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""75247dd7-11a2-45ac-8c7c-df8b1af25a3c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a7a2d4b-118e-4b5d-827a-5baef76e544e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba4abb29-7324-4a17-8071-ae7e4dd23fde"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02ee3218-f90f-498f-b45b-87d8a6b2ba8e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fc88a0b-d96c-4c7b-80cb-c62e0de5a708"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""749afba1-015c-49b7-9960-50af1ead0887"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6bfeb06-8db9-481c-81d3-a4e9684f920d"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerActor
            m_PlayerActor = asset.FindActionMap("PlayerActor", throwIfNotFound: true);
            m_PlayerActor_Right = m_PlayerActor.FindAction("Right", throwIfNotFound: true);
            m_PlayerActor_Up = m_PlayerActor.FindAction("Up", throwIfNotFound: true);
            m_PlayerActor_Left = m_PlayerActor.FindAction("Left", throwIfNotFound: true);
            m_PlayerActor_Down = m_PlayerActor.FindAction("Down", throwIfNotFound: true);
            m_PlayerActor_PrimaryTouchContact = m_PlayerActor.FindAction("PrimaryTouchContact", throwIfNotFound: true);
            m_PlayerActor_PrimaryTouchPosition = m_PlayerActor.FindAction("PrimaryTouchPosition", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerActor
        private readonly InputActionMap m_PlayerActor;
        private List<IPlayerActorActions> m_PlayerActorActionsCallbackInterfaces = new List<IPlayerActorActions>();
        private readonly InputAction m_PlayerActor_Right;
        private readonly InputAction m_PlayerActor_Up;
        private readonly InputAction m_PlayerActor_Left;
        private readonly InputAction m_PlayerActor_Down;
        private readonly InputAction m_PlayerActor_PrimaryTouchContact;
        private readonly InputAction m_PlayerActor_PrimaryTouchPosition;
        public struct PlayerActorActions
        {
            private @PlayerActorControls m_Wrapper;
            public PlayerActorActions(@PlayerActorControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Right => m_Wrapper.m_PlayerActor_Right;
            public InputAction @Up => m_Wrapper.m_PlayerActor_Up;
            public InputAction @Left => m_Wrapper.m_PlayerActor_Left;
            public InputAction @Down => m_Wrapper.m_PlayerActor_Down;
            public InputAction @PrimaryTouchContact => m_Wrapper.m_PlayerActor_PrimaryTouchContact;
            public InputAction @PrimaryTouchPosition => m_Wrapper.m_PlayerActor_PrimaryTouchPosition;
            public InputActionMap Get() { return m_Wrapper.m_PlayerActor; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActorActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActorActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActorActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActorActionsCallbackInterfaces.Add(instance);
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @PrimaryTouchContact.started += instance.OnPrimaryTouchContact;
                @PrimaryTouchContact.performed += instance.OnPrimaryTouchContact;
                @PrimaryTouchContact.canceled += instance.OnPrimaryTouchContact;
                @PrimaryTouchPosition.started += instance.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.performed += instance.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.canceled += instance.OnPrimaryTouchPosition;
            }

            private void UnregisterCallbacks(IPlayerActorActions instance)
            {
                @Right.started -= instance.OnRight;
                @Right.performed -= instance.OnRight;
                @Right.canceled -= instance.OnRight;
                @Up.started -= instance.OnUp;
                @Up.performed -= instance.OnUp;
                @Up.canceled -= instance.OnUp;
                @Left.started -= instance.OnLeft;
                @Left.performed -= instance.OnLeft;
                @Left.canceled -= instance.OnLeft;
                @Down.started -= instance.OnDown;
                @Down.performed -= instance.OnDown;
                @Down.canceled -= instance.OnDown;
                @PrimaryTouchContact.started -= instance.OnPrimaryTouchContact;
                @PrimaryTouchContact.performed -= instance.OnPrimaryTouchContact;
                @PrimaryTouchContact.canceled -= instance.OnPrimaryTouchContact;
                @PrimaryTouchPosition.started -= instance.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.performed -= instance.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.canceled -= instance.OnPrimaryTouchPosition;
            }

            public void RemoveCallbacks(IPlayerActorActions instance)
            {
                if (m_Wrapper.m_PlayerActorActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActorActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActorActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActorActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActorActions @PlayerActor => new PlayerActorActions(this);
        public interface IPlayerActorActions
        {
            void OnRight(InputAction.CallbackContext context);
            void OnUp(InputAction.CallbackContext context);
            void OnLeft(InputAction.CallbackContext context);
            void OnDown(InputAction.CallbackContext context);
            void OnPrimaryTouchContact(InputAction.CallbackContext context);
            void OnPrimaryTouchPosition(InputAction.CallbackContext context);
        }
    }
}
